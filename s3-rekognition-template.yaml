AWSTemplateFormatVersion: 2010-09-09
# Transform: 'AWS::Serverless-2016-10-31'  # TODO what's this
Description: Watch an S3 path for file upload, send it to Rekognition, write output to S3
Parameters:
  BucketName:
    Description: S3 bucket for video and output files
    Type: String
    Default: emotionrecognition
  InputPrefix:
    Description: Path to watch for input video files
    Type: String
    Default: videos
  OutputPrefix:
    Description: Path to write Rekognition output into
    Type: String
    Default: face_detection_output

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    DependsOn: BucketLambdaInvokePermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref InputPrefix
            Function: !GetAtt BucketWatcher.Arn
      Tags:
        - Key: source
          Value: s3rekog-cf

  BucketLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:s3:::${BucketName}
      FunctionName: !GetAtt BucketWatcher.Arn

  BucketWatcher:
    Type: AWS::Lambda::Function
    Properties:
      Description: An Amazon S3 trigger that uses rekognition APIs to detect emotions
      Role: !GetAtt BucketWatcherLambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import urllib.parse

          import os
          import boto3

          ROLE_ARN = os.environ['ROLE_ARN']
          TOPIC_ARN = os.environ['TOPIC_ARN']

          r_client = boto3.client('rekognition')


          # Trigger AWS Lambda Function on S3 Put
          def lambda_handler(event, context):

              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = urllib.parse.unquote_plus(
                      record['s3']['object']['key'], encoding='utf-8'
                  )
                  start_face_detection(bucket, key)


          def start_face_detection(bucket, s3_filepath):
              print('starting face detection for {}'.format(
                  os.path.join(bucket, s3_filepath)
              ))
              response = r_client.start_face_detection(
                  FaceAttributes='ALL',
                  JobTag='emotion_detection',
                  NotificationChannel={
                      'RoleArn': ROLE_ARN,
                      'SNSTopicArn': TOPIC_ARN
                  },
                  Video={
                      'S3Object': {
                          'Bucket': bucket,
                          'Name': s3_filepath
                      }
                  }
              )
              job_id = response['JobId']
              print('JobId: {}'.format(job_id))
              return job_id
      MemorySize: 128
      Timeout: 3
      Runtime: python3.6
      Environment:
        Variables:
          ROLE_ARN: !GetAtt RekognitionSNSKinesisRole.Arn
          TOPIC_ARN: !Ref SNSTopic
      Tags:
        - Key: source
          Value: s3rekog-cf

  BucketWatcherLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /service-role/
      Policies:
        - PolicyName: AWSLambdaRekognitionFaceDetection
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:StartFaceDetection
                Resource: '*'
        - PolicyName: S3ReadFaceDetectionInput
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                Resource: !Sub 'arn:aws:s3:::${BucketName}/${InputPrefix}/*'

        - PolicyName: PassRekognitionSnsKinesis
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt RekognitionSNSKinesisRole.Arn

  RekognitionSNSKinesisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'rekognition.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies:
      - PolicyName: AmazonRecognitionSNSWrite
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: !Ref SNSTopic
          - Effect: Allow
            Action:
            - kinesis:PutRecord
            - kinesis:PutRecords
            Resource: arn:aws:kinesis:*:*:stream/AmazonRekognition*
          - Effect: Allow
            Action:
            - kinesisvideo:GetDataEndpoint
            - kinesisvideo:GetMedia
            Resource: '*'

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: FaceDetectionTopic
      Subscription:
      - Endpoint: !GetAtt SNSWatcher.Arn
        Protocol: lambda

  SNSTopicLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic
      FunctionName: !GetAtt SNSWatcher.Arn

  SNSWatcher:
    Type: AWS::Lambda::Function
    Properties:
      Description: A lambda that copies Rekognition output to S3
      Role: !GetAtt SNSWatcherLambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import os

          import boto3


          BUCKET = os.environ['BUCKET']
          PATH = os.environ['PATH']

          rekog = boto3.client('rekognition')
          s3 = boto3.resource('s3')


          def lambda_handler(event, context):
              print('Received event: ' + json.dumps(event, indent=2))
              message = json.loads(event['Records'][0]['Sns']['Message'])

              face_detection = rekog.get_face_detection(JobId=message['JobId'])
              face_detection_json = json.dumps(face_detection)

              filename = os.path.basename(message['Video']['S3ObjectName'])
              key = os.path.join(PATH, filename + '.json')

              s3.Bucket(BUCKET).put_object(
                  Key=key, Body=face_detection_json
              )

              print('Wrote ' + os.path.join(BUCKET, key))
      MemorySize: 128
      Timeout: 3
      Runtime: python3.6
      Environment:
        Variables:
          BUCKET: !Ref BucketName
          PATH: !Ref OutputPrefix
      Tags:
        - Key: source
          Value: s3rekog-cf

  SNSWatcherLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: RekogToS3WritePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - rekognition:GetFaceDetection
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub 'arn:aws:s3:::${BucketName}/${OutputPrefix}/*'
